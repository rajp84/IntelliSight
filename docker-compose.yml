services:
  etcd:
    image: quay.io/coreos/etcd:v3.5.9
    container_name: milvus-etcd
    environment:
      ETCD_AUTO_COMPACTION_MODE: revision
      ETCD_AUTO_COMPACTION_RETENTION: "1000"
      ETCD_QUOTA_BACKEND_BYTES: "4294967296"
      #ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      #ETCD_ADVERTISE_CLIENT_URLS: http://etcd:2379
      ETCDCTL_API: "3"
    command: >
      /usr/local/bin/etcd
      --name=etcd
      --data-dir=/etcd
      --advertise-client-urls=http://etcd:2379
      --listen-client-urls=http://0.0.0.0:2379
      --initial-advertise-peer-urls=http://etcd:2380
      --listen-peer-urls=http://0.0.0.0:2380
      --initial-cluster=etcd=http://etcd:2380
      --initial-cluster-state=new
      --initial-cluster-token=etcd-cluster
    volumes:
      - etcd_data:/etcd
    healthcheck:
      test: ["CMD", "etcdctl", "--endpoints=http://127.0.0.1:2379", "endpoint", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [aiplus-milvus-net]


  minio:
    image: minio/minio:RELEASE.2025-09-07T16-13-09Z
    container_name: milvus-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"   # S3 API
      - "9001:9001"   # MinIO console
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks: [aiplus-milvus-net]

  milvus:
    image: milvusdb/milvus:v2.4.8
    container_name: milvus-standalone
    depends_on:
      etcd: { condition: service_healthy }
      minio: { condition: service_healthy }
    environment:
      # etcd
      ETCD_ENDPOINTS: etcd:2379

      # MinIO / S3 (these are read by Milvus itself)
      MINIO_ADDRESS: minio           # host only
      MINIO_PORT: "9000"
      MINIO_ACCESS_KEY_ID: minioadmin
      MINIO_SECRET_ACCESS_KEY: minioadmin123
      MINIO_USE_SSL: "false"
      MINIO_BUCKET_NAME: milvus-bucket
    command: ["milvus","run","standalone"]   # keep CMD explicit to avoid tini-only runs
    volumes:
      - milvus_data:/var/lib/milvus
    ports:
      - "19530:19530"
      - "9091:9091"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [aiplus-milvus-net]



  # Optional web UI (Attu). Browse http://localhost:8000 and connect to 127.0.0.1:19530
  attu:
    image: zilliz/attu:latest
    container_name: milvus-attu
    depends_on:
      - milvus
    environment:
      # You can prefill a default endpoint; users can also set it in the UI.
      MILVUS_URL: milvus:19530
    ports:
      - "5530:3000"
    networks: [aiplus-milvus-net]

  mongo:
    image: mongo:7.0
    container_name: aiplus-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo_data:/data/db
    ports:
      - "27017:27017"
    healthcheck:
      test:
        ["CMD", "mongosh", "--quiet", "--host", "localhost:27017",
         "-u", "root", "-p", "password", "--authenticationDatabase", "admin",
         "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [aiplus-milvus-net]

  mongo-express:
    image: mongo-express:1.0.2
    container_name: aiplus-mongo-express
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_URL: mongodb://root:password@mongo:27017/?authSource=admin
      ME_CONFIG_BASICAUTH: "false"   # set to "true" + creds for auth in prod
    ports:
      - "5540:8081"
    networks: [aiplus-milvus-net]


networks:
  aiplus-milvus-net:

volumes:
  etcd_data:
  minio_data:
  milvus_data:
  mongo_data: